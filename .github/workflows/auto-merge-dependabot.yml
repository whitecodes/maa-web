name: Auto-merge Dependabot PRs

on:
  workflow_run:
    workflows: ["Dependabot Placeholder Check"]
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  checks: read
  actions: read

jobs:
  auto-merge:
    name: Auto-merge Dependabot PR
    runs-on: ubuntu-latest

    if: github.event.workflow_run.conclusion == 'success'
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Get PR details from workflow_run
        id: pr-details
        uses: actions/github-script@v7
        with:
          script: |
            console.log('🔍 Getting PR details from workflow_run event...');
            console.log('Workflow run:', context.payload.workflow_run);

            // Get the PR associated with the workflow run
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${context.payload.workflow_run.head_branch}`,
              state: 'open'
            });

            if (prs.length === 0) {
              core.setFailed('No open PR found for this workflow run');
              return;
            }

            const pr = prs[0];
            console.log(`PR Number: ${pr.number}`);
            console.log(`PR Title: ${pr.title}`);
            console.log(`PR Author: ${pr.user.login}`);
            console.log(`PR Base: ${pr.base.ref}`);
            console.log(`PR Head: ${pr.head.ref}`);

            // Verify this is a Dependabot PR
            if (pr.user.login !== 'dependabot[bot]') {
              core.setFailed(`Not a Dependabot PR. Author: ${pr.user.login}`);
              return;
            }

            return {
              number: pr.number,
              title: pr.title,
              author: pr.user.login,
              base: pr.base.ref,
              head: pr.head.ref,
              node_id: pr.node_id,
              sha: pr.head.sha
            };

      - name: Determine update type
        id: update-type
        run: |
          PR_TITLE="${{ fromJson(steps.pr-details.outputs.result).title }}"
          echo "PR Title: $PR_TITLE"
          
          # Check for major version updates (should not auto-merge)
          if echo "$PR_TITLE" | grep -E "(major|breaking|BREAKING)" -i; then
            echo "auto_merge=false" >> $GITHUB_OUTPUT
            echo "reason=Major version update detected" >> $GITHUB_OUTPUT
          # Check for minor/patch updates (safe to auto-merge)
          elif echo "$PR_TITLE" | grep -E "(minor|patch|bump|update)" -i; then
            echo "auto_merge=true" >> $GITHUB_OUTPUT
            echo "reason=Minor or patch update detected" >> $GITHUB_OUTPUT
          # Check for security updates (should auto-merge)
          elif echo "$PR_TITLE" | grep -E "(security|vulnerability|CVE)" -i; then
            echo "auto_merge=true" >> $GITHUB_OUTPUT
            echo "reason=Security update detected" >> $GITHUB_OUTPUT
          # Default: check if it looks like a standard dependency update
          elif echo "$PR_TITLE" | grep -E "^(build\(deps\)|chore\(deps\))" -i; then
            echo "auto_merge=true" >> $GITHUB_OUTPUT
            echo "reason=Standard dependency update" >> $GITHUB_OUTPUT
          else
            echo "auto_merge=false" >> $GITHUB_OUTPUT
            echo "reason=Unable to determine update type" >> $GITHUB_OUTPUT
          fi

      - name: Log decision
        run: |
          echo "🤖 Auto-merge: ${{ steps.update-type.outputs.auto_merge }}"
          echo "📝 Reason: ${{ steps.update-type.outputs.reason }}"

      - name: Check PR status and merge
        if: steps.update-type.outputs.auto_merge == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { exec } = require('@actions/exec');
            const prDetails = ${{ steps.pr-details.outputs.result }};
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prDetails.number
            });
            
            // Check if all checks are successful
            const { data: checks } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: prDetails.sha
            });
            
            const { data: statuses } = await github.rest.repos.listCommitStatusesForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: prDetails.sha
            });
            
            const allChecks = [
              ...checks.check_runs.map(check => ({
                name: check.name,
                status: check.status,
                conclusion: check.conclusion
              })),
              ...statuses.map(status => ({
                name: status.context,
                status: status.state === 'pending' ? 'in_progress' : 'completed',
                conclusion: status.state
              }))
            ];
            
            const allChecksCompleted = allChecks.every(check => 
              check.status === 'completed' || check.conclusion === 'success'
            );
            
            if (!allChecksCompleted) {
              core.setFailed('Not all checks have completed yet');
              return;
            }
            
            if (pr.mergeable_state !== 'clean') {
              core.setFailed(`PR is not in a mergeable state: ${pr.mergeable_state}`);
              return;
            }
            
            // Install GitHub CLI
            await exec.exec('curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg');
            await exec.exec('echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null');
            await exec.exec('sudo apt update');
            await exec.exec('sudo apt install gh');
            
            // Authenticate GitHub CLI
            process.env.GH_TOKEN = process.env.GITHUB_TOKEN;
            
            // Merge the PR
            try {
              await exec.exec(`gh pr merge ${prDetails.number} --merge --auto`);
              console.log('🎉 Successfully merged PR');
            } catch (error) {
              core.setFailed(`Failed to merge PR: ${error.message}`);
            }
