name: Auto-merge Dependabot PRs

on:
  pull_request:
    branches: [ master ]
    types: [ opened, synchronize, reopened ]

# Minimal permissions for security
permissions:
  contents: read
  pull-requests: write
  checks: read

jobs:
  auto-merge:
    name: Auto-merge Dependabot PR
    runs-on: ubuntu-latest
    
    # Only run for Dependabot PRs
    if: github.actor == 'dependabot[bot]'
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Get PR details
        id: pr-details
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            console.log(`PR Title: ${pr.title}`);
            console.log(`PR Author: ${pr.user.login}`);
            console.log(`PR Base: ${pr.base.ref}`);
            console.log(`PR Head: ${pr.head.ref}`);
            
            return {
              title: pr.title,
              author: pr.user.login,
              base: pr.base.ref,
              head: pr.head.ref
            };

      - name: Determine update type
        id: update-type
        run: |
          PR_TITLE="${{ fromJson(steps.pr-details.outputs.result).title }}"
          echo "PR Title: $PR_TITLE"
          
          # Check for major version updates (should not auto-merge)
          if echo "$PR_TITLE" | grep -E "(major|breaking|BREAKING)" -i; then
            echo "update_type=major" >> $GITHUB_OUTPUT
            echo "auto_merge=false" >> $GITHUB_OUTPUT
            echo "reason=Major version update detected" >> $GITHUB_OUTPUT
          # Check for minor/patch updates (safe to auto-merge)
          elif echo "$PR_TITLE" | grep -E "(minor|patch|bump|update)" -i; then
            echo "update_type=minor_or_patch" >> $GITHUB_OUTPUT
            echo "auto_merge=true" >> $GITHUB_OUTPUT
            echo "reason=Minor or patch update detected" >> $GITHUB_OUTPUT
          # Check for security updates (should auto-merge)
          elif echo "$PR_TITLE" | grep -E "(security|vulnerability|CVE)" -i; then
            echo "update_type=security" >> $GITHUB_OUTPUT
            echo "auto_merge=true" >> $GITHUB_OUTPUT
            echo "reason=Security update detected" >> $GITHUB_OUTPUT
          # Default: check if it looks like a standard dependency update
          elif echo "$PR_TITLE" | grep -E "^(build\(deps\)|chore\(deps\))" -i; then
            echo "update_type=dependency" >> $GITHUB_OUTPUT
            echo "auto_merge=true" >> $GITHUB_OUTPUT
            echo "reason=Standard dependency update" >> $GITHUB_OUTPUT
          else
            echo "update_type=unknown" >> $GITHUB_OUTPUT
            echo "auto_merge=false" >> $GITHUB_OUTPUT
            echo "reason=Unable to determine update type" >> $GITHUB_OUTPUT
          fi

      - name: Log decision
        run: |
          echo "🔍 Update Type: ${{ steps.update-type.outputs.update_type }}"
          echo "🤖 Auto-merge: ${{ steps.update-type.outputs.auto_merge }}"
          echo "📝 Reason: ${{ steps.update-type.outputs.reason }}"

      - name: Wait for CI checks
        if: steps.update-type.outputs.auto_merge == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const maxWaitTime = 30 * 60 * 1000; // 30 minutes
            const pollInterval = 30 * 1000; // 30 seconds
            const startTime = Date.now();
            
            console.log('⏳ Waiting for CI checks to complete...');
            
            while (Date.now() - startTime < maxWaitTime) {
              const { data: checks } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.payload.pull_request.head.sha
              });
              
              const { data: statuses } = await github.rest.repos.listCommitStatusesForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.payload.pull_request.head.sha
              });
              
              // Get all check runs and statuses
              const allChecks = [
                ...checks.check_runs.map(check => ({
                  name: check.name,
                  status: check.status,
                  conclusion: check.conclusion
                })),
                ...statuses.map(status => ({
                  name: status.context,
                  status: status.state === 'pending' ? 'in_progress' : 'completed',
                  conclusion: status.state
                }))
              ];
              
              console.log('📊 Current check status:');
              allChecks.forEach(check => {
                console.log(`  - ${check.name}: ${check.status} (${check.conclusion || 'N/A'})`);
              });
              
              // Filter out this workflow's checks to avoid circular dependency
              const relevantChecks = allChecks.filter(check => 
                !check.name.includes('Auto-merge Dependabot PR')
              );
              
              if (relevantChecks.length === 0) {
                console.log('⚠️ No CI checks found, proceeding with merge');
                break;
              }
              
              const pendingChecks = relevantChecks.filter(check => 
                check.status === 'in_progress' || check.status === 'queued' || check.conclusion === 'pending'
              );
              
              const failedChecks = relevantChecks.filter(check => 
                check.conclusion === 'failure' || check.conclusion === 'error' || check.conclusion === 'cancelled'
              );
              
              if (failedChecks.length > 0) {
                console.log('❌ CI checks failed:');
                failedChecks.forEach(check => {
                  console.log(`  - ${check.name}: ${check.conclusion}`);
                });
                core.setFailed('CI checks failed, cannot auto-merge');
                return;
              }
              
              if (pendingChecks.length === 0) {
                console.log('✅ All CI checks passed!');
                break;
              }
              
              console.log(`⏳ Waiting for ${pendingChecks.length} checks to complete...`);
              await new Promise(resolve => setTimeout(resolve, pollInterval));
            }
            
            if (Date.now() - startTime >= maxWaitTime) {
              core.setFailed('Timeout waiting for CI checks to complete');
            }

      - name: Enable auto-merge
        if: steps.update-type.outputs.auto_merge == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            console.log('🚀 Enabling auto-merge for Dependabot PR...');
            
            try {
              await github.rest.pulls.enableAutoMerge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                merge_method: 'squash'
              });
              
              console.log('✅ Auto-merge enabled successfully!');
              
              // Add a comment to the PR
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `🤖 **Auto-merge enabled**\n\n` +
                      `This Dependabot PR has been automatically approved for merging because:\n` +
                      `- ✅ Author is verified as dependabot[bot]\n` +
                      `- ✅ Update type: ${steps.update-type.outputs.update_type}\n` +
                      `- ✅ All CI checks passed\n\n` +
                      `The PR will be automatically merged when all required status checks pass.`
              });
              
            } catch (error) {
              console.error('❌ Failed to enable auto-merge:', error);
              core.setFailed(`Failed to enable auto-merge: ${error.message}`);
            }

      - name: Skip auto-merge
        if: steps.update-type.outputs.auto_merge == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            console.log('⏭️ Skipping auto-merge for this PR');
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `🤖 **Auto-merge skipped**\n\n` +
                    `This Dependabot PR was not automatically merged because:\n` +
                    `- 📋 Reason: ${{ steps.update-type.outputs.reason }}\n` +
                    `- 🔍 Update type: ${{ steps.update-type.outputs.update_type }}\n\n` +
                    `Please review this PR manually before merging.`
            });
